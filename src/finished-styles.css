@layer base,utils,components;
@layer utils {
    @property --box-rounded-radius {
        syntax: "<length>";
        inherits: false;
        initial-value: 4px;
    }

    @property --box-border-width {
        syntax: "<length>";
        inherits: false;
        initial-value: 2px;
    }

    @property --box-double-border-width {
        syntax: "<length>";
        inherits: false;
        initial-value: 1px;
    }

    [box-="square"],
    [box-="round"],
    [box-="double"] {
        position: relative;
        isolation: isolate;
        padding: 1lh 1ch;
    }

    [box-=square]: before,[box-=round]:before,[box-=double]:before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;
        width: calc(100% - 1ch - var(--box-border-width));
        height: calc(100% - 1lh - var(--box-border-width));
        border: solid var(--box-border-width) var(--box-border-color);
        z-index: -1;
    }

    [box-=square][box-=round]: before,[box-=round][box-=round]:before,[box-=double][box-=round]:before {
        border-radius: var(--box-rounded-radius);
    }

    [box-=square][box-=round]: after,[box-=round][box-=round]:after,[box-=double][box-=round]:after {
        border-radius: calc(var(--box-rounded-radius) + 2px);
    }

    [box-=square][box-=double]: before,[box-=round][box-=double]:before,[box-=double][box-=double]:before {
        border-width: var(--box-double-border-width);
    }

    [box-=square][box-=double]: after,[box-=round][box-=double]:after,[box-=double][box-=double]:after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        translate: -50% -50%;
        width: calc(100% - 1ch + var(--box-double-border-width) * 2);
        height: calc(100% - 1lh + var(--box-double-border-width) * 2);
        border: solid var(--box-double-border-width) var(--box-border-color);
        z-index: -1;
    }

    [box-="square"][shear-="both"],
    [box-="round"][shear-="both"],
    [box-="double"][shear-="both"] {
        padding-top: 0;
        padding-bottom: 0;
    }

    [box-="square"][shear-="top"],
    [box-="round"][shear-="top"],
    [box-="double"][shear-="top"] {
        padding-top: 0;
    }

    [box-="square"][shear-="bottom"],
    [box-="round"][shear-="bottom"],
    [box-="double"][shear-="bottom"] {
        padding-bottom: 0;
    }
}

@layer base {
    :root {
        --background0: #fff;
        --background1: #ddd;
        --background2: #bbb;
        --background3: #999;
        --foreground0: #000;
        --foreground1: #444;
        --foreground2: #888;
        --font-size: 16px;
        --line-height: 1.3;
        --font-weight-bold: 700;
        --font-weight-normal: 400;
        --font-family: monospace;
        --box-border-color: var(--foreground0);
        --table-border-color: var(--box-border-color);
        --separator-color: var(--box-border-color);
        --separator-background: transparent;
    }

    [data-webtui-theme="dark"] {
        --background0: #000;
        --background1: #222;
        --background2: #444;
        --background3: #666;
        --foreground0: #fff;
        --foreground1: #ccc;
        --foreground2: #999;
    }

    body,
    html {
        background-color: var(--background0);
        color: var(--foreground0);
        font-family: var(--font-family);
        font-size: var(--font-size);
        font-weight: var(--font-weight-normal);
        line-height: var(--line-height, 1.5);
        font-variant-ligatures: common-ligatures;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        outline: none;
    }
}

@layer components {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        font-weight: var(--font-weight-bold);
    }

    h1 code,
    h2 code,
    h3 code,
    h4 code,
    h5 code,
    h6 code {
        color: inherit;
        background-color: var(--background1);
        padding: 0 1ch;
    }

    ol {
        list-style-position: inside;
    }

    ol li > ol {
        margin-left: 2ch;
    }

    ul {
        list-style-type: none;
    }

    ul li: before {
    color: inherit;
    content: "- ";
}

    ul[marker-=bullet] li: before {
        content: "• ";
    }

    ul[marker-~=tree] li: before {
        content: "├ ";
    }

    ul[marker-~=tree]: not([marker-^=open]) li:first-of-type:before {
    content: "┌ ";
}

    ul[marker-~=tree]: not([marker-$=open]) li:last-of-type:before {
    content: "└ ";
}

    ul li > ul {
        margin-left: 2ch;
    }

    p,
    blockquote,
    li,
    [is-~="typography-block"] {
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        color: var(--foreground1);
    }

    p: is(blockquote),blockquote:is(blockquote),li:is(blockquote),[is-~=typography-block]:is(blockquote) {
                          padding-left: 2ch;
                          position: relative;
                      }

    p: is(blockquote):before,blockquote:is(blockquote):before,li:is(blockquote):before,[is-~=typography-block]:is(blockquote):before {
                                 content: "";
                                 position: absolute;
                                 top: 0;
                                 left: 0.5ch;
                                 width: var(--box-border-width, 2px);
                                 height: 100%;
                                 translate: -50%;
                                 background-color: var(--background2);
                             }

    p strong,
    blockquote strong,
    li strong,
    [is-~="typography-block"] strong {
        font-weight: var(--font-weight-bold);
        color: var(--foreground0);
    }

    p a,
    blockquote a,
    li a,
    [is-~="typography-block"] a {
        text-decoration: underline;
        color: var(--foreground2);
    }

    p code,
    blockquote code,
    li code,
    [is-~="typography-block"] code {
        display: inline-block;
        background-color: var(--background1);
        padding-left: 1ch;
        padding-right: 1ch;
    }
}

@layer components {
    [is-~="badge"] {
        color: var(--badge-text);
        background-image: linear-gradient(
                90deg,
                transparent 0,
                transparent calc(1ch - 1px),
                var(--badge-color) calc(1ch - 1px),
                var(--badge-color) calc(100% - 1ch + 1px),
                transparent calc(100% - 1ch + 1px),
                transparent
        );
        display: inline-flex;
        vertical-align: top;
        white-space: nowrap;
        height: 1lh;
        line-height: 1lh;
    }

    [is-~=badge][variant-=foreground0],[is-~=badge]: not([variant-]) {
    --badge-color: var(--foreground0);
    --badge-text: var(--background0);
}

    [is-~="badge"][variant-="foreground1"] {
        --badge-color: var(--foreground1);
        --badge-text: var(--background0);
    }

    [is-~="badge"][variant-="foreground2"] {
        --badge-color: var(--foreground2);
        --badge-text: var(--background0);
    }

    [is-~="badge"][variant-="background0"] {
        --badge-color: var(--background0);
        --badge-text: var(--foreground0);
    }

    [is-~="badge"][variant-="background1"] {
        --badge-color: var(--background1);
        --badge-text: var(--foreground0);
    }

    [is-~="badge"][variant-="background2"] {
        --badge-color: var(--background2);
        --badge-text: var(--foreground0);
    }

    [is-~="badge"][variant-="background3"] {
        --badge-color: var(--background3);
        --badge-text: var(--foreground0);
    }

    [is-~=badge]: before,[is-~=badge]:after {
        content: "";
        width: 1ch;
        height: 1lh;
        display: inline-block;
        vertical-align: middle;
        background-color: var(--badge-color);
        overflow: hidden;
    }

    [is-~=badge][cap-^=round]: before {
        border-top-left-radius: 1lh;
        border-bottom-left-radius: 1lh;
    }

    [is-~=badge][cap-$=round]: after {
        border-top-right-radius: 1lh;
        border-bottom-right-radius: 1lh;
    }

    [is-~=badge][cap-^=triangle]: before {
        clip-path: polygon(100% 0, 100% 100%, 0 50%);
    }

    [is-~=badge][cap-$=triangle]: after {
        clip-path: polygon(0 0, 0 100%, 100% 50%);
    }

    [is-~=badge][cap-^=slant-top]: before {
        clip-path: polygon(0 0, 100% 0, 100% 100%);
    }

    [is-~=badge][cap-$=slant-top]: after {
        clip-path: polygon(0 0, 100% 0, 0 100%);
    }

    [is-~=badge][cap-^=slant-bottom]: before {
        clip-path: polygon(100% 0, 100% 100%, 0 100%);
    }

    [is-~=badge][cap-$=slant-bottom]: after {
        clip-path: polygon(0 0, 100% 100%, 0 100%);
    }

    [is-~=badge][cap-^=ribbon]: before {
        clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%, 100% 50%);
    }

    [is-~=badge][cap-$=ribbon]: after {
        clip-path: polygon(0 0, 100% 0, 0% 50%, 100% 100%, 0% 100%);
    }
}

@layer components {
    button,
    input[type="button"],
    input[type="submit"],
    input[type="reset"],
    [is-~="button"] {
        --button-primary: var(--foreground0);
        --button-secondary: var(--background0);
        --mapped-primary: var(--button-primary);
        --mapped-secondary: var(--button-secondary);
        color: var(--mapped-secondary);
        background-color: var(--mapped-primary);
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: none;
        padding: 0 2ch;
        outline: none;
    }

    button[box-],
    input[type="button"][box-],
    input[type="submit"][box-],
    input[type="reset"][box-],
    [is-~="button"][box-] {
        color: var(--mapped-primary);
        background-color: transparent;
        --box-border-color: var(--mapped-primary);
    }

    button: focus,input[type=button]:focus,input[type=submit]:focus,input[type=reset]:focus,[is-~=button]:focus {
                           font-weight: 700;
                           text-decoration: underline;
                       }

    button: active,input[type=button]:active,input[type=submit]:active,input[type=reset]:active,[is-~=button]:active {
                            --mapped-primary: var(--mapped-secondary);
                            --mapped-secondary: var(--mapped-primary);
                        }

    button: disabled,input[type=button]:disabled,input[type=submit]:disabled,input[type=reset]:disabled,[is-~=button]:disabled {
                              text-decoration: line-through;
                              pointer-events: none;
                          }

    button[size-="small"],
    input[type="button"][size-="small"],
    input[type="submit"][size-="small"],
    input[type="reset"][size-="small"],
    [is-~="button"][size-="small"] {
        padding: 0 1ch;
        height: 1lh;
    }

    button: not([size-]):not([box-]),button[size-=default]:not([box-]),input[type=button]:not([size-]):not([box-]),input[type=button][size-=default]:not([box-]),input[type=submit]:not([size-]):not([box-]),input[type=submit][size-=default]:not([box-]),input[type=reset]:not([size-]):not([box-]),input[type=reset][size-=default]:not([box-]),[is-~=button]:not([size-]):not([box-]),[is-~=button][size-=default]:not([box-]) {
                                               background-color: transparent;
                                               background-image: linear-gradient(
                                                       to bottom,
                                                       transparent 0,
                                                       transparent 0.5lh,
                                                       var(--mapped-primary) 0.5lh,
                                                       var(--mapped-primary) calc(100% - 0.5lh),
                                                       transparent calc(100% - 0.5lh),
                                                       transparent
                                               );
                                           }

    button[size-=large],button[size-=default],button: not([size-]),input[type=button][size-=large],input[type=button][size-=default],input[type=button]:not([size-]),input[type=submit][size-=large],input[type=submit][size-=default],input[type=submit]:not([size-]),input[type=reset][size-=large],input[type=reset][size-=default],input[type=reset]:not([size-]),[is-~=button][size-=large],[is-~=button][size-=default],[is-~=button]:not([size-]) {
    height: 3lh;
}

    button[variant-=foreground0],button: not([variant-]),input[type=button][variant-=foreground0],input[type=button]:not([variant-]),input[type=submit][variant-=foreground0],input[type=submit]:not([variant-]),input[type=reset][variant-=foreground0],input[type=reset]:not([variant-]),[is-~=button][variant-=foreground0],[is-~=button]:not([variant-]) {
    --button-primary: var(--foreground0);
    --button-secondary: var(--background0);
}

    button[variant-="foreground1"],
    input[type="button"][variant-="foreground1"],
    input[type="submit"][variant-="foreground1"],
    input[type="reset"][variant-="foreground1"],
    [is-~="button"][variant-="foreground1"] {
        --button-primary: var(--foreground1);
        --button-secondary: var(--background0);
    }

    button[variant-="foreground2"],
    input[type="button"][variant-="foreground2"],
    input[type="submit"][variant-="foreground2"],
    input[type="reset"][variant-="foreground2"],
    [is-~="button"][variant-="foreground2"] {
        --button-primary: var(--foreground2);
        --button-secondary: var(--background0);
    }

    button[variant-="background0"],
    input[type="button"][variant-="background0"],
    input[type="submit"][variant-="background0"],
    input[type="reset"][variant-="background0"],
    [is-~="button"][variant-="background0"] {
        --button-primary: var(--background0);
        --button-secondary: var(--foreground0);
    }

    button[variant-="background1"],
    input[type="button"][variant-="background1"],
    input[type="submit"][variant-="background1"],
    input[type="reset"][variant-="background1"],
    [is-~="button"][variant-="background1"] {
        --button-primary: var(--background1);
        --button-secondary: var(--foreground0);
    }

    button[variant-="background2"],
    input[type="button"][variant-="background2"],
    input[type="submit"][variant-="background2"],
    input[type="reset"][variant-="background2"],
    [is-~="button"][variant-="background2"] {
        --button-primary: var(--background2);
        --button-secondary: var(--foreground0);
    }

    button[variant-="background3"],
    input[type="button"][variant-="background3"],
    input[type="submit"][variant-="background3"],
    input[type="reset"][variant-="background3"],
    [is-~="button"][variant-="background3"] {
        --button-primary: var(--background3);
        --button-secondary: var(--foreground0);
    }
}

@layer components {
    input[type=checkbox]: not([is-=switch]) {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    display: inline-block;
    position: relative;
    width: 3ch;
    min-width: initial;
    vertical-align: text-top;
    color: var(--foreground2);
    font-family: var(--font-family);
    font-size: var(--font-size);
    line-height: var(--line-height);
    outline: none;
}

    input[type=checkbox]: not([is-=switch]):before {
    content: "";
    position: absolute;
    inset: 0;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 3ch;
    height: 1lh;
    background: var(--background1);
}

    input[type=checkbox]: not([is-=switch]):checked:before {
    content: "X";
}

    label: has(input[type=checkbox]:not([is-=switch])) {
    display: inline-flex;
    align-items: flex-start;
    gap: 1ch;
    max-width: fit-content;
}

    label: has(input[type=checkbox]:not([is-=switch]):focus) {
    font-weight: 700;
    text-decoration: underline;
}

    input[type=checkbox]: not([is-=switch]):disabled {
    color: var(--foreground2);
    pointer-events: none;
}

    label: has(input[type=checkbox]:not([is-=switch]):disabled) {
    color: var(--foreground2);
    text-decoration: line-through;
}
}

@layer components {
    pre,
    [is-~="pre"] {
        --pre-background: var(--background1);
        background-color: var(--pre-background);
        white-space: pre-wrap;
        color: var(--foreground0);
        font-family: var(--font-family);
        font-size: var(--font-size);
        font-weight: var(--font-weight-normal);
        line-height: var(--line-height);
        outline: none;
        border: none;
        padding: 1lh 1ch;
    }

    pre[size-="small"],
    [is-~="pre"][size-="small"] {
        padding: 0 1ch;
    }

    pre: not([size-]),[is-~=pre]:not([size-]) {
                          background-color: transparent;
                          background-image: linear-gradient(
                                  to bottom,
                                  transparent,
                                  transparent 0.5lh,
                                  var(--pre-background) 0.5lh,
                                  var(--pre-background) calc(100% - 0.5lh),
                                  transparent calc(100% - 0.5lh),
                                  transparent
                          );
                      }
}

@layer components {
    progress {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border: none;
        outline: none;
    }

    ::-webkit-progress-value,
    ::-webkit-progress-bar {
        background-color: transparent;
    }

    ::-moz-progress-bar {
        background-color: transparent;
    }

    progress,
    [is-~="progress"] {
        --progress-value-background: var(--foreground0);
        --progress-value-color: var(--foreground0);
        --progress-value-content: "";
        --progress-empty-background: var(--background1);
        --progress-empty-color: var(--foreground0);
        --progress-empty-content: "";
        width: round(down, 100%, 1ch);
        height: 1lh;
        margin: 0;
        background-color: var(--progress-background-empty);
        color: var(--progress-color-empty);
        color: transparent;
        position: relative;
        vertical-align: top;
        display: inline-flex;
    }

    progress: before,[is-~=progress]:before {
                         content: var(--progress-value-content);
                         position: absolute;
                         top: 0;
                         left: 0;
                         height: 1lh;
                         vertical-align: top;
                         color: var(--progress-value-color);
                         width: round(
                                 nearest,
                                 calc(attr(value type(<number>)) / attr(max type(<number>)) * 100%),
                                 1ch
                         );
                         overflow: hidden;
                         white-space: nowrap;
                         background-color: var(--progress-value-background);
                         z-index: 1;
                     }

    progress: after,[is-~=progress]:after {
                        content: var(--progress-empty-content);
                        position: absolute;
                        top: 0;
                        right: 0;
                        height: 1lh;
                        vertical-align: top;
                        color: var(--progress-empty-color);
                        overflow: hidden;
                        width: round(
                                up,
                                calc(
                                        100% - (attr(value type(<number>)) / attr(max type(<number>)) * 100%)
                                ),
                                1ch
                        );
                        white-space: nowrap;
                        background-color: var(--progress-empty-background);
                        z-index: 0;
                    }
}

@layer components {
    @property --dialog-offset-x {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    @property --dialog-offset-y {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    @property --dialog-max-width {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    @property --dialog-max-height {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    dialog {
        --dialog-offset-top: auto;
        --dialog-offset-right: auto;
        --dialog-offset-bottom: auto;
        --dialog-offset-left: auto;
        background-color: var(--background0);
        color: var(--foreground0);
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        border: none;
        outline: none;
        position: absolute;
        max-width: var(--dialog-max-width);
        max-height: var(--dialog-max-height);
        overflow: hidden;
        inset: var(--dialog-offset-top) var(--dialog-offset-right)
        var(--dialog-offset-bottom) var(--dialog-offset-left);
    }

    dialog[open],dialog: popover-open {
        display: flex;
        flex-direction: column;
    }

    dialog[size-="full"] {
        --dialog-max-width: 100vw;
        --dialog-max-height: 100vh;
    }

    dialog[size-=default],dialog: not([size-]) {
    --dialog-max-width: 64ch;
    --dialog-max-height: 24lh;
}

    dialog[size-="small"] {
        --dialog-max-width: 48ch;
        --dialog-max-height: 16lh;
    }

    dialog[container-^=auto],dialog: not([container-]) {
    width: auto;
}

    dialog[container-^="fill"] {
        width: calc(100% - var(--dialog-offset-x) * 2);
    }

    dialog[container-$=auto],dialog: not([container-]) {
    height: auto;
}

    dialog[container-$="fill"] {
        height: calc(100% - var(--dialog-offset-y) * 2);
    }

    dialog[position-^="start"] {
        --dialog-offset-left: var(--dialog-offset-x);
        --dialog-offset-right: auto;
    }

    dialog[position-^="end"] {
        --dialog-offset-left: auto;
        --dialog-offset-right: var(--dialog-offset-x);
    }

    dialog[position-^=center],dialog: not([position-]) {
    --dialog-offset-left: 50%;
    translate: -50%;
}

    dialog[position-$="start"] {
        --dialog-offset-top: var(--dialog-offset-y);
        --dialog-offset-bottom: auto;
    }

    dialog[position-$="end"] {
        --dialog-offset-top: auto;
        --dialog-offset-bottom: var(--dialog-offset-y);
    }

    dialog[position-$=center],dialog: not([position-]) {
    --dialog-offset-top: 50%;
    transform: translateY(-50%);
}
}

@layer components {
    input[type=text],input[type=email],input[type=password],input[type=search],input[type=tel],input[type=url],input[type=number],input[type=date],input[type=datetime],input[type=datetime-local],input[type=month],input[type=time],input[type=week],input: not([type]),[is-~=input] {
    background-color: var(--background1);
    color: var(--foreground0);
    font-family: var(--font-family);
    font-size: var(--font-size);
    font-weight: var(--font-weight-normal);
    line-height: var(--line-height);
    outline: none;
    border: none;
    min-width: 24ch;
}

    input[type=text]: :placeholder,input[type=email]::placeholder,input[type=password]::placeholder,input[type=search]::placeholder,input[type=tel]::placeholder,input[type=url]::placeholder,input[type=number]::placeholder,input[type=date]::placeholder,input[type=datetime]::placeholder,input[type=datetime-local]::placeholder,input[type=month]::placeholder,input[type=time]::placeholder,input[type=week]::placeholder,input:not([type])::placeholder,[is-~=input]::placeholder {
        color: var(--foreground2);
    }

    input[type=text]: not([size-]),input[type=email]:not([size-]),input[type=password]:not([size-]),input[type=search]:not([size-]),input[type=tel]:not([size-]),input[type=url]:not([size-]),input[type=number]:not([size-]),input[type=date]:not([size-]),input[type=datetime]:not([size-]),input[type=datetime-local]:not([size-]),input[type=month]:not([size-]),input[type=time]:not([size-]),input[type=week]:not([size-]),input:not([type]):not([size-]),[is-~=input]:not([size-]) {
    height: 1lh;
    padding: 0 1ch;
}

    input[type=text][size-=small],input[type=email][size-=small],input[type=password][size-=small],input[type=search][size-=small],input[type=tel][size-=small],input[type=url][size-=small],input[type=number][size-=small],input[type=date][size-=small],input[type=datetime][size-=small],input[type=datetime-local][size-=small],input[type=month][size-=small],input[type=time][size-=small],input[type=week][size-=small],input: not([type])[size-=small],[is-~=input][size-=small] {
    height: 1lh;
    padding: 0;
}

    input[type=text][size-=large],input[type=email][size-=large],input[type=password][size-=large],input[type=search][size-=large],input[type=tel][size-=large],input[type=url][size-=large],input[type=number][size-=large],input[type=date][size-=large],input[type=datetime][size-=large],input[type=datetime-local][size-=large],input[type=month][size-=large],input[type=time][size-=large],input[type=week][size-=large],input: not([type])[size-=large],[is-~=input][size-=large] {
    height: 3lh;
    padding: 1lh 2ch;
}
}

@layer components {
    input[type="radio"] {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        display: inline-block;
        position: relative;
        width: 3ch;
        min-width: initial;
        vertical-align: text-top;
        color: var(--foreground2);
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        outline: none;
    }

    input[type=radio]: before {
        content: "( )";
        position: absolute;
        inset: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 3ch;
        height: 1lh;
        background: var(--background1);
    }

    input[type=radio]: checked:before {
        content: "(*)";
    }

    input[type=radio]: disabled {
        color: var(--foreground2);
        pointer-events: none;
    }

    label: has(input[type=radio]) {
    display: inline-flex;
    align-items: flex-start;
    gap: 1ch;
    max-width: fit-content;
}

    label: has(input[type=radio]:focus) {
    font-weight: 700;
    text-decoration: underline;
}

    label: has(input[type=radio]:disabled) {
    color: var(--foreground2);
    text-decoration: line-through;
}
}

@layer components {
    input[type="range"] {
        --range-track-color: var(--background1);
        --range-thumb-color: var(--foreground2);
        --range-thumb-color-focus: var(--foreground0);
        --range-track-height: 2px;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background: transparent;
        outline: none;
        min-width: 20ch;
        height: 1lh;
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        position: relative;
    }

    input[type=range]: :-webkit-slider-runnable-track {
        -moz-appearance: none;
        appearance: none;
        -webkit-appearance: none;
        width: 100%;
        height: var(--range-track-height);
        background: var(--range-track-color);
        border: none;
        outline: none;
    }

    input[type=range]: :-webkit-slider-thumb {
        -moz-appearance: none;
        appearance: none;
        -webkit-appearance: none;
        width: 1ch;
        height: 1lh;
        background: transparent;
        border: 1px solid var(--range-thumb-color);
        border-radius: 0;
        box-sizing: border-box;
        position: relative;
        top: 50%;
        transform: translateY(-50%);
    }

    input[type=range]: not(:disabled):focus::-webkit-slider-thumb,input[type=range]:not(:disabled):active::-webkit-slider-thumb {
    background: var(--range-thumb-color-focus);
    border: none;
}

    input[type=range]: :-moz-range-track {
        width: 100%;
        height: var(--range-track-height);
        background: var(--range-track-color);
        border: none;
        outline: none;
    }

    input[type=range]: :-moz-range-thumb {
        width: 1ch;
        height: 1lh;
        background: transparent;
        border: 1px solid var(--range-thumb-color);
        border-radius: 0;
        box-sizing: border-box;
    }

    input[type=range]: not(:disabled):focus::-moz-range-thumb,input[type=range]:not(:disabled):active::-moz-range-thumb {
    background: var(--range-thumb-color-focus);
    border: none;
}

    input[type=range]: disabled {
        --range-track-color: var(--background2);
        --range-thumb-color: var(--foreground2);
        pointer-events: none;
        opacity: 0.6;
    }

    input[type="range"][bar-="thick"] {
        --range-track-height: 1lh;
    }

    input[type=range][bar-=thick]: :-webkit-slider-thumb {
        height: 1lh;
    }

    input[type=range][bar-=thick]: :-moz-range-thumb {
        height: 1lh;
    }

    input[type="range"][bar-="line"] {
        --range-track-height: 1px;
    }

    label: has(input[type=range]) {
    display: inline-flex;
    align-items: center;
    gap: 1ch;
    max-width: fit-content;
}

    label: has(input[type=range]:focus) {
    font-weight: 700;
    text-decoration: underline;
}

    label: has(input[type=range]:disabled) {
    color: var(--foreground2);
    text-decoration: line-through;
}
}

@layer components {
    @property --separator-width {
        syntax: "<length>";
        inherits: true;
        initial-value: 2px;
    }

    [is-~="separator"] {
        --separator-bg-fallback: var(--separator-background, transparent);
        display: inline-flex;
        position: relative;
    }

    [is-~=separator][direction-=x],[is-~=separator][direction-=horizontal],[is-~=separator]: not([direction-]) {
    height: 1lh;
    background-image: linear-gradient(
            0deg,
            var(--separator-bg-fallback) 0,
            var(--separator-bg-fallback) calc(0.5lh - var(--separator-width) / 2),
            var(--separator-color) calc(0.5lh - (var(--separator-width) / 2)),
            var(--separator-color) calc(0.5lh + (var(--separator-width) / 2)),
            var(--separator-bg-fallback) calc(0.5lh + (var(--separator-width) / 2)),
            var(--separator-bg-fallback)
    );
}

    [is-~=separator][direction-=x][cap-^=bisect]: before,[is-~=separator][direction-=horizontal][cap-^=bisect]:before,[is-~=separator]:not([direction-])[cap-^=bisect]:before {
        left: -0.5ch;
    }

    [is-~=separator][direction-=x][cap-$=bisect]: after,[is-~=separator][direction-=horizontal][cap-$=bisect]:after,[is-~=separator]:not([direction-])[cap-$=bisect]:after {
        right: -0.5ch;
    }

    [is-~=separator][direction-=x][cap-^=edge]: not([cap-=edge]),[is-~=separator][direction-=horizontal][cap-^=edge]:not([cap-=edge]),[is-~=separator]:not([direction-])[cap-^=edge]:not([cap-=edge]) {
    clip-path: inset(0 -0.5ch 0 0.5ch);
}

    [is-~=separator][direction-=x][cap-$=edge]: not([cap-=edge]),[is-~=separator][direction-=horizontal][cap-$=edge]:not([cap-=edge]),[is-~=separator]:not([direction-])[cap-$=edge]:not([cap-=edge]) {
    clip-path: inset(0 0.5ch 0 -0.5ch);
}

    [is-~=separator][direction-=x][cap-=edge],[is-~=separator][direction-=horizontal][cap-=edge],[is-~=separator]: not([direction-])[cap-=edge] {
    clip-path: inset(0 0.5ch);
}

    [is-~="separator"][direction-="y"],
    [is-~="separator"][direction-="vertical"] {
        width: 1ch;
        background-image: linear-gradient(
                to right,
                var(--separator-bg-fallback) 0,
                var(--separator-bg-fallback) calc(0.5ch - (var(--separator-width) / 2)),
                var(--separator-color) calc(0.5ch - (var(--separator-width) / 2)),
                var(--separator-color) calc(0.5ch + (var(--separator-width) / 2)),
                var(--separator-bg-fallback) calc(0.5ch + (var(--separator-width) / 2)),
                var(--separator-bg-fallback)
        );
    }

    [is-~=separator][direction-=y][cap-^=bisect]: before,[is-~=separator][direction-=vertical][cap-^=bisect]:before {
        top: -0.5lh;
    }

    [is-~=separator][direction-=y][cap-$=bisect]: after,[is-~=separator][direction-=vertical][cap-$=bisect]:after {
        bottom: -0.5lh;
    }

    [is-~=separator][direction-=y][cap-^=edge]: not([cap-=edge]),[is-~=separator][direction-=vertical][cap-^=edge]:not([cap-=edge]) {
    clip-path: inset(0.5lh 0 -0.5lh 0);
}

    [is-~=separator][direction-=y][cap-$=edge]: not([cap-=edge]),[is-~=separator][direction-=vertical][cap-$=edge]:not([cap-=edge]) {
    clip-path: inset(-0.5lh 0 0.5lh 0);
}

    [is-~="separator"][direction-="y"][cap-="edge"],
    [is-~="separator"][direction-="vertical"][cap-="edge"] {
        clip-path: inset(0.5lh 0);
    }

    [is-~=separator][cap-]: before,[is-~=separator][cap-]:after {
        content: "";
        position: absolute;
        width: 1ch;
        height: 1lh;
        background-image: inherit;
    }
}

@layer components {
    [is-="spinner"] {
        --spinner-steps: 4;
        --spinner-chars: "/-\\|";
        --spinner-duration: 1s;
        width: 1ch;
        height: 1lh;
        overflow: hidden;
        position: relative;
        display: inline-block;
        vertical-align: top;
    }

    [is-="spinner"][variant-="dots"] {
        --spinner-steps: 8;
        --spinner-chars: "⣷⣯⣟⡿⢿⣻⣽⣾";
    }

    [is-="spinner"][variant-="arrows"] {
        --spinner-steps: 8;
        --spinner-chars: "←↖↑↗→↘↓↙";
    }

    [is-="spinner"][variant-="cross"] {
        --spinner-steps: 2;
        --spinner-chars: "+x";
    }

    [is-="spinner"][variant-="square"] {
        --spinner-steps: 4;
        --spinner-chars: "◰◳◲◱";
    }

    [is-="spinner"][variant-="pie"] {
        --spinner-steps: 4;
        --spinner-chars: "◴◷◶◵";
    }

    [is-="spinner"][variant-="half"] {
        --spinner-steps: 4;
        --spinner-chars: "◐◓◑◒";
    }

    [is-="spinner"][variant-="bar-vertical"] {
        --spinner-steps: 12;
        --spinner-chars: "▁▃▄▅▆▇█▇▆▅▄▃";
    }

    [is-="spinner"][variant-="bar-horizontal"] {
        --spinner-steps: 13;
        --spinner-chars: "▉▊▋▌▍▎▏▎▍▌▋▊▉";
    }

    [is-="spinner"][speed-="slow"] {
        --spinner-duration: 2s;
    }

    [is-=spinner][speed-=medium],[is-=spinner][speed-=default],[is-=spinner]: not([speed-]) {
    --spinner-duration: 1s;
}

    [is-="spinner"][speed-="fast"] {
        --spinner-duration: 0.5s;
    }

    [is-=spinner]: before {
        content: var(--spinner-chars);
        position: absolute;
        top: 0;
        left: 0;
        color: inherit;
        white-space: nowrap;
        height: 1lh;
        animation: spinner-pan var(--spinner-duration) steps(var(--spinner-steps))
        infinite;
    }

    [is-=spinner][direction-=reverse]: before {
        animation-direction: reverse;
    }

    @keyframes spinner-pan {
        0% {
            translate: 0ch;
        }

        to {
            translate: -100%;
        }
    }
}

@layer components {
    input[type="checkbox"][is-="switch"] {
        --switch-thumb-color: var(--foreground2);
        --switch-track-color: var(--background1);
        --switch-thin-track-width: 2px;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        display: inline-block;
        position: relative;
        width: 4ch;
        height: 1lh;
        min-width: initial;
        vertical-align: text-top;
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        background-color: transparent;
        outline: none;
    }

    input[type=checkbox][is-=switch]: before {
        content: "";
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 4ch;
        height: 1lh;
        background: var(--switch-track-color);
    }

    input[type=checkbox][is-=switch]: after {
        content: "";
        position: absolute;
        left: 0;
        width: 2ch;
        height: 1lh;
        background: var(--switch-thumb-color);
    }

    input[type=checkbox][is-=switch]: checked:after {
        left: unset;
        right: 0;
        --switch-thumb-color: var(--foreground0);
    }

    input[type=checkbox][is-=switch]: disabled {
        --switch-thumb-color: var(--background2);
        pointer-events: none;
    }

    input[type=checkbox][is-=switch]: disabled:checked:after {
        --switch-thumb-color: var(--background2);
    }

    input[type="checkbox"][is-="switch"][size-="small"] {
        width: 2ch;
    }

    input[type=checkbox][is-=switch][size-=small]: before {
        width: 2ch;
    }

    input[type=checkbox][is-=switch][size-=small]: after {
        width: 1ch;
    }

    input[type=checkbox][is-=switch][bar-=thin]: before {
        height: 0.5lh;
    }

    input[type=checkbox][is-=switch][bar-=line]: before {
        height: var(--switch-thin-track-width);
    }

    label: has(input[type=checkbox][is-=switch]) {
    display: inline-flex;
    align-items: flex-start;
    gap: 1ch;
    max-width: fit-content;
}

    label: has(input[type=checkbox][is-=switch]:focus) {
    font-weight: 700;
    text-decoration: underline;
}

    label: has(input[type=checkbox][is-=switch]:disabled) {
    color: var(--foreground2);
    text-decoration: line-through;
}
}

@layer components {
    @property --table-border-width {
        syntax: "<length>";
        inherits: true;
        initial-value: 2px;
    }

    table {
        border: none;
        outline: none;
        font-family: var(--font-family);
        font-size: var(--font-size);
        font-weight: var(--font-weight-normal);
        line-height: var(--line-height);
        text-align: left;
        position: relative;
        border-spacing: 0 0;
    }

    table: before {
    content: "";
    position: absolute;
    top: calc(0.5lh - (var(--table-border-width) / 2));
    left: calc(0.5ch - (var(--table-border-width) / 2));
    width: calc(100% - 1ch - var(--table-border-width));
    height: calc(100% - 1lh - var(--table-border-width));
    border: solid var(--table-border-width) var(--table-border-color);
}

    table tr: first-of-type td,table tr:first-of-type th {
                                         padding-top: 1lh;
                                     }

    table tr: first-of-type:last-of-type td:before,table tr:first-of-type:last-of-type th:before {
                  height: calc(100% - 1lh);
              }

    table tr th {
        font-weight: var(--font-weight-bold);
    }

    table tr th,
    table tr td {
        position: relative;
        padding-right: 1ch;
        padding-bottom: 1lh;
    }

    table tr th: first-of-type,table tr td:first-of-type {
                                            padding-left: 1ch;
                                        }

    table tr th: before,table tr td:before {
                                     content: "";
                                     position: absolute;
                                     right: calc(0.5ch - var(--table-border-width) / 2);
                                     bottom: calc(0.5lh - var(--table-border-width) / 2);
                                     border-left: solid var(--table-border-width) var(--table-border-color);
                                     height: 100%;
                                 }

    table tr th: after,table tr td:after {
                                    content: "";
                                    position: absolute;
                                    left: calc(0.5ch + var(--table-border-width) / 2);
                                    bottom: calc(0.5lh - var(--table-border-width) / 2);
                                    width: 100%;
                                    border-top: solid var(--table-border-width) var(--table-border-color);
                                }

    table tr th: last-of-type:after,table tr td:last-of-type:after {
                                                 width: calc(100% - 1ch);
                                             }

    table thead+tbody tr: first-of-type td,table thead+tbody tr:first-of-type th,table tbody+tfoot tr:first-of-type td,table tbody+tfoot tr:first-of-type th {
                                                                 padding-top: 0;
                                                             }
}

@layer components {
    textarea,
    [is-~="textarea"] {
        background-color: var(--background1);
        color: var(--foreground0);
        font-family: var(--font-family);
        font-size: var(--font-size);
        font-weight: var(--font-weight-normal);
        line-height: var(--line-height);
        outline: none;
        border: none;
        resize: vertical;
        min-width: 24ch;
    }

    textarea: :placeholder,[is-~=textarea]::placeholder {
                               color: var(--foreground2);
                           }

    textarea: not([size-]),[is-~=textarea]:not([size-]) {
                               min-height: 2lh;
                               padding: 0 1ch;
                           }

    textarea[size-="small"],
    [is-~="textarea"][size-="small"] {
        min-height: 2lh;
        padding: 0;
    }

    textarea[size-="large"],
    [is-~="textarea"][size-="large"] {
        min-height: 4lh;
        padding: 1lh 2ch;
    }
}

@layer components {
    @property --tooltip-offset-x {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    @property --tooltip-offset-y {
        syntax: "<length>";
        inherits: true;
        initial-value: 0;
    }

    @property --tooltip-delay {
        syntax: "<time>";
        inherits: true;
        initial-value: 0.5s;
    }

    [is-~="tooltip"] {
        position: relative;
    }

    [is-~="tooltip"] [is-~="tooltip-content"] {
        opacity: 0;
        transition: all 0s linear 0s;
        transform: scale(0);
        overflow: hidden;
        position: absolute;
    }

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content] {
    opacity: 1;
    z-index: 2;
    transform: scale(1);
    transition-delay: var(--tooltip-delay);
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=baseline-left],[is-~=tooltip]:has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content]:not([position-]),[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=baseline-left],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content]:not([position-]),[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=baseline-left],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content]:not([position-]) {
    left: 0%;
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=baseline-right],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=baseline-right],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=baseline-right] {
    left: 100%;
    translate: -100%;
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=left],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=left],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=left] {
    left: calc(var(--tooltip-offset-x) * -1);
    translate: -100%;
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=right],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=right],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=right] {
    left: calc(100% + var(--tooltip-offset-x));
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=baseline-top],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=baseline-top],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=baseline-top] {
    top: 0%;
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=baseline-bottom],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=baseline-bottom],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=baseline-bottom] {
    top: 100%;
    transform: translateY(-100%);
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=top],[is-~=tooltip]:has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content]:not([position-]),[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=top],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content]:not([position-]),[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=top],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content]:not([position-]) {
    top: calc(var(--tooltip-offset-y) * -1);
    transform: translateY(-100%);
}

    [is-~=tooltip]: has([is-~=tooltip-trigger]:hover)>[is-~=tooltip-content][position-~=bottom],[is-~=tooltip]:has([is-~=tooltip-trigger]:focus)>[is-~=tooltip-content][position-~=bottom],[is-~=tooltip]:has([is-~=tooltip-content]:hover)>[is-~=tooltip-content][position-~=bottom] {
    top: calc(100% + var(--tooltip-offset-y));
}
}

@layer components {
    [is-~="view"] {
        position: relative;
    }

    [is-~="view-content"] {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: round(down, 100%, 1ch);
        height: round(down, 100%, 1lh);
        overflow: hidden;
        word-break: break-all;
    }
}

@layer base {
    [data-webtui-theme="catppuccin"],
    [data-webtui-theme="catppuccin-mocha"] {
        --rosewater: #f5e0dc;
        --flamingo: #f2cdcd;
        --pink: #f5c2e7;
        --mauve: #cba6f7;
        --red: #f38ba8;
        --maroon: #eba0ac;
        --peach: #fab387;
        --yellow: #f9e2af;
        --green: #a6e3a1;
        --teal: #94e2d5;
        --sky: #89dceb;
        --sapphire: #74c7ec;
        --blue: #89b4fa;
        --lavender: #b4befe;
        --text: #cdd6f4;
        --subtext1: #bac2de;
        --subtext0: #a6adc8;
        --overlay2: #9399b2;
        --overlay1: #7f849c;
        --overlay0: #6c7086;
        --surface2: #585b70;
        --surface1: #45475a;
        --surface0: #313244;
        --base: #1e1e2e;
        --mantle: #181825;
        --crust: #11111b;
    }

    [data-webtui-theme="catppuccin-macchiato"] {
        --rosewater: #f4dbd6;
        --flamingo: #f0c6c6;
        --pink: #f5bde6;
        --mauve: #c6a0f6;
        --red: #ed8796;
        --maroon: #ee99a0;
        --peach: #f5a97f;
        --yellow: #eed49f;
        --green: #a6da95;
        --teal: #8bd5ca;
        --sky: #91d7e3;
        --sapphire: #7dc4e4;
        --blue: #8aadf4;
        --lavender: #b7bdf8;
        --text: #cad3f5;
        --subtext1: #b8c0e0;
        --subtext0: #a5adcb;
        --overlay2: #939ab7;
        --overlay1: #8087a2;
        --overlay0: #6e738d;
        --surface2: #5b6078;
        --surface1: #494d64;
        --surface0: #363a4f;
        --base: #24273a;
        --mantle: #1e2030;
        --crust: #181926;
    }

    [data-webtui-theme="catppuccin-frappe"] {
        --rosewater: #f2d5cf;
        --flamingo: #eebebe;
        --pink: #f4b8e4;
        --mauve: #ca9ee6;
        --red: #e78284;
        --maroon: #ea999c;
        --peach: #ef9f76;
        --yellow: #e5c890;
        --green: #a6d189;
        --teal: #81c8be;
        --sky: #99d1db;
        --sapphire: #85c1dc;
        --blue: #8caaee;
        --lavender: #babbf1;
        --text: #c6d0f5;
        --subtext1: #b5bfe2;
        --subtext0: #a5adce;
        --overlay2: #949cbb;
        --overlay1: #838ba7;
        --overlay0: #737994;
        --surface2: #626880;
        --surface1: #51576d;
        --surface0: #414559;
        --base: #303446;
        --mantle: #292c3c;
        --crust: #232634;
    }

    [data-webtui-theme="catppuccin-latte"] {
        --rosewater: #dc8a78;
        --flamingo: #dd7878;
        --pink: #ea76cb;
        --mauve: #8839ef;
        --red: #d20f39;
        --maroon: #e64553;
        --peach: #fe640b;
        --yellow: #df8e1d;
        --green: #40a02b;
        --teal: #179299;
        --sky: #04a5e5;
        --sapphire: #209fb5;
        --blue: #1e66f5;
        --lavender: #7287fd;
        --text: #4c4f69;
        --subtext1: #5c5f77;
        --subtext0: #6c6f85;
        --overlay2: #7c7f93;
        --overlay1: #8c8fa1;
        --overlay0: #9ca0b0;
        --surface2: #acb0be;
        --surface1: #bcc0cc;
        --surface0: #ccd0da;
        --base: #eff1f5;
        --mantle: #e6e9ef;
        --crust: #dce0e8;
    }

    [data-webtui-theme|="catppuccin"] {
        --background0: var(--base);
        --background1: var(--surface0);
        --background2: var(--surface1);
        --background3: var(--surface2);
        --foreground0: var(--text);
        --foreground1: var(--subtext1);
        --foreground2: var(--overlay2);
    }
}

@layer components {
    [data-webtui-theme|="catppuccin"] button[variant-="rosewater"] {
        --button-primary: var(--rosewater);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="flamingo"] {
        --button-primary: var(--flamingo);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="pink"] {
        --button-primary: var(--pink);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="mauve"] {
        --button-primary: var(--mauve);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="red"] {
        --button-primary: var(--red);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="maroon"] {
        --button-primary: var(--maroon);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="peach"] {
        --button-primary: var(--peach);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="yellow"] {
        --button-primary: var(--yellow);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="green"] {
        --button-primary: var(--green);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="teal"] {
        --button-primary: var(--teal);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="sky"] {
        --button-primary: var(--sky);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="sapphire"] {
        --button-primary: var(--sapphire);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="blue"] {
        --button-primary: var(--blue);
        --button-secondary: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] button[variant-="lavender"] {
        --button-primary: var(--lavender);
        --button-secondary: var(--background0);
    }
}

@layer components {
    [data-webtui-theme|="catppuccin"] h1 {
        color: var(--red);
    }

    [data-webtui-theme|="catppuccin"] h2 {
        color: var(--peach);
    }

    [data-webtui-theme|="catppuccin"] h3 {
        color: var(--yellow);
    }

    [data-webtui-theme|="catppuccin"] h4 {
        color: var(--green);
    }

    [data-webtui-theme|="catppuccin"] h5 {
        color: var(--blue);
    }

    [data-webtui-theme|="catppuccin"] h6 {
        color: var(--lavender);
    }

    [data-webtui-theme|="catppuccin"] p a,
    [data-webtui-theme|="catppuccin"] blockquote a,
    [data-webtui-theme|="catppuccin"] li a,
    [data-webtui-theme|="catppuccin"] [is-~="typography-block"] a {
        color: var(--sky);
        text-decoration: underline;
    }

    [data-webtui-theme|=catppuccin] p a: hover,[data-webtui-theme|=catppuccin] blockquote a:hover,[data-webtui-theme|=catppuccin] li a:hover,[data-webtui-theme|=catppuccin] [is-~=typography-block] a:hover {
        color: var(--blue);
    }

    [data-webtui-theme|="catppuccin"] p code,
    [data-webtui-theme|="catppuccin"] blockquote code,
    [data-webtui-theme|="catppuccin"] li code,
    [data-webtui-theme|="catppuccin"] [is-~="typography-block"] code {
        color: var(--red);
    }
}

@layer components {
    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="rosewater"] {
        --badge-color: var(--rosewater);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="flamingo"] {
        --badge-color: var(--flamingo);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="pink"] {
        --badge-color: var(--pink);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="mauve"] {
        --badge-color: var(--mauve);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="red"] {
        --badge-color: var(--red);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="maroon"] {
        --badge-color: var(--maroon);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="peach"] {
        --badge-color: var(--peach);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="yellow"] {
        --badge-color: var(--yellow);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="green"] {
        --badge-color: var(--green);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="teal"] {
        --badge-color: var(--teal);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="sky"] {
        --badge-color: var(--sky);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="sapphire"] {
        --badge-color: var(--sapphire);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="blue"] {
        --badge-color: var(--blue);
        --badge-text: var(--background0);
    }

    [data-webtui-theme|="catppuccin"] [is-~="badge"][variant-="lavender"] {
        --badge-color: var(--lavender);
        --badge-text: var(--background0);
    }
}

:root {
    --background0: var(--base);
    --background1: var(--surface0);
    --background2: var(--surface1);
    --background3: var(--surface2);
    --foreground0: var(--text);
    --foreground1: var(--subtext1);
    --foreground2: var(--overlay2);
}

@layer base {
    :root {
        --catppuccin-bg: #1e1e2e;
        --catppuccin-fg: #cdd6f4;
        --catppuccin-muted: #94a1b2;
        --rosewater: #f5e0dc;
        --flamingo: #f2cdcd;
        --pink: #f5c2e7;
        --mauve: #cba6f7;
        --red: #f38ba8;
        --maroon: #eba0ac;
        --peach: #fab387;
        --yellow: #f9e2af;
        --green: #a6e3a1;
        --teal: #94e2d5;
        --sky: #89dceb;
        --sapphire: #74c7ec;
        --blue: #89b4fa;
        --lavender: #b4befe;
        --text: #cdd6f4;
        --subtext1: #bac2de;
        --subtext0: #a6adc8;
        --overlay2: #9399b2;
        --overlay1: #7f849c;
        --overlay0: #6c7086;
        --surface2: #585b70;
        --surface1: #45475a;
        --surface0: #313244;
        --base: #1e1e2e;
        --mantle: #181825;
        --crust: #11111b;
    }
}

body {
    margin: 0;
    padding: 0;
}

body {
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: subpixel-antialiased;
    font-kerning: auto;
}

:is(h1, h2, h3, h4, h5, h6, p, span, a, li, td, th) {
    text-rendering: optimizeLegibility;
    font-kerning: normal;
    font-feature-settings: "liga", "kern";
}

@layer base {
    :root {
        --step--5: clamp(0.3686rem, 0.6197rem + -0.324vw, 0.5549rem);
        --step--4: clamp(0.4608rem, 0.6812rem + -0.2843vw, 0.6243rem);
        --step--3: clamp(0.576rem, 0.7463rem + -0.2197vw, 0.7023rem);
        --step--2: clamp(0.72rem, 0.8145rem + -0.122vw, 0.7901rem);
        --step--1: clamp(0.8889rem, 0.885rem + 0.0193vw, 0.9rem);
        --step-0: clamp(1rem, 0.9565rem + 0.2174vw, 1.125rem);
        --step-1: clamp(1.125rem, 1.0272rem + 0.4891vw, 1.4063rem);
        --step-2: clamp(1.2656rem, 1.0944rem + 0.856vw, 1.7578rem);
        --step-3: clamp(1.4238rem, 1.1548rem + 1.3451vw, 2.1973rem);
        --step-4: clamp(1.6018rem, 1.2036rem + 1.9909vw, 2.7466rem);
        --step-5: clamp(1.802rem, 1.2347rem + 2.8369vw, 3.4332rem);
        --step-6: clamp(2.0273rem, 1.2397rem + 3.9378vw, 4.2915rem);
        --step-7: clamp(2.2807rem, 1.2081rem + 5.363vw, 5.3644rem);
        --step-8: clamp(2.5658rem, 1.1259rem + 7.1995vw, 6.7055rem);
        --space-3xs: clamp(0.25rem, 0.2283rem + 0.1087vw, 0.3125rem);
        --space-2xs: clamp(0.5rem, 0.4783rem + 0.1087vw, 0.5625rem);
        --space-xs: clamp(0.75rem, 0.7065rem + 0.2174vw, 0.875rem);
        --space-s: clamp(1rem, 0.9565rem + 0.2174vw, 1.125rem);
        --space-m: clamp(1.5rem, 1.4348rem + 0.3261vw, 1.6875rem);
        --space-l: clamp(2rem, 1.913rem + 0.4348vw, 2.25rem);
        --space-xl: clamp(3rem, 2.8696rem + 0.6522vw, 3.375rem);
        --space-2xl: clamp(4rem, 3.8261rem + 0.8696vw, 4.5rem);
        --space-3xl: clamp(6rem, 5.7391rem + 1.3043vw, 6.75rem);
        --flow-space: var(--space-s);
        --flow-space--medium: var(--space-xl);
        --flow-space--large: var(--space-2xl);
        --base-line-height: 2.5;
        --base-font-size: 62.5%;
    }
}

.content-flow[data-astro-cid-j7pv25f6]
> [data-astro-cid-j7pv25f6]
+ [data-astro-cid-j7pv25f6] {
    margin-block-start: var(--flow-space);
}

.content-flow[data-astro-cid-j7pv25f6]>[data-astro-cid-j7pv25f6]+[data-astro-cid-j7pv25f6]: is(h1,h2,h3) {
    margin-block-start: var(--flow-space--large);
}

.content-flow[data-astro-cid-j7pv25f6]
> [data-astro-cid-j7pv25f6]
+ .has-medium-flow-space[data-astro-cid-j7pv25f6],
.content-flow[data-astro-cid-j7pv25f6]
> .has-medium-flow-space[data-astro-cid-j7pv25f6]
+ [data-astro-cid-j7pv25f6] {
    margin-block-start: var(--flow-space--medium);
}

.content-flow[data-astro-cid-j7pv25f6]
> [data-astro-cid-j7pv25f6]
+ .has-large-flow-space[data-astro-cid-j7pv25f6],
.content-flow[data-astro-cid-j7pv25f6]
> .has-large-flow-space[data-astro-cid-j7pv25f6]
+ [data-astro-cid-j7pv25f6] {
    margin-block-start: var(--flow-space--large);
}

.left[data-astro-cid-j7pv25f6] {
    text-align: left;
}

.right[data-astro-cid-j7pv25f6] {
    text-align: right;
}

body > div[data-astro-cid-j7pv25f6] > section[data-astro-cid-j7pv25f6] {
    --box-border-color: cyan;
    --box-rounded-radius: 8px;
    --box-border-width: 1px;
    --box-double-border-width: 1px;
}

.grid[data-astro-cid-j7pv25f6] {
    display: grid;
    grid-template-columns: repeat(
    auto-fit,
    minmax(min(var(--item-width, 200px), 100%), 1fr)
  );
    grid-template-rows: masonry;
    grid-auto-flow: dense;
    gap: var(--gap, 2ch);
}

.grid-item[data-astro-cid-j7pv25f6] {
    grid-row-end: var(--row-span, span 0);
    .icon[data-astro-cid-j7pv25f6] {
        img {
            width: 100%;
            height: auto;
            object-fit: contain;
            padding: 1ch 6ch;
            filter: invert(1);
        }
    }
}

img[data-astro-cid-j7pv25f6] {
    width: 100%;
    height: auto;
}

@media (max-width: 800px) {
    .grid[data-astro-cid-j7pv25f6] {
        width: 90%;
        grid-template-columns: 1fr;
        grid-auto-rows: auto;
    }

    .grid-item[data-astro-cid-j7pv25f6] {
        grid-row-end: auto;
    }
}
